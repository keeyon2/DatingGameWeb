// Generated by CoffeeScript 1.10.0
(function() {
  var Logic, root;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  Logic = (function() {
    function Logic() {}

    root.constructor = function() {
      return this.initialize();
    };

    root.initialize = function() {
      this.number_of_turns = 0;
      this.number_of_attributes = 0;
      this.max_score = -100;
      return this.current_attributes = [];
    };

    root.startGame = function(total_atr, total_turns) {
      this.number_of_turns = total_atr;
      this.number_of_attributes = total_turns;
      return this.createCandidate();
    };

    root.createCandidate = function() {
      var all_attributes, atr, candidate, i, j, k, len, number_of_negative_candidates, number_of_positive_candidates, ref, ref1, ref2, remaining_negative_value, remaining_positive_value, results, value;
      all_attributes = [];
      number_of_positive_candidates = this.number_of_attributes / 2;
      number_of_negative_candidates = this.number_of_attributes - number_of_positive_candidates;
      console.log("Number of positive Cand: " + number_of_positive_candidates);
      console.log("Number of negative Cand: " + number_of_negative_candidates);
      remaining_positive_value = 100;
      remaining_negative_value = 100;
      for (candidate = i = 1, ref = number_of_positive_candidates - 1; 1 <= ref ? i <= ref : i >= ref; candidate = 1 <= ref ? ++i : --i) {
        value = Math.floor(Math.random() * remaining_positive_value);
        remaining_positive_value -= value;
        value = value / 100;
        all_attributes.push(value);
      }
      all_attributes.push(remaining_positive_value / 100);
      for (candidate = j = 1, ref1 = number_of_negative_candidates - 1; 1 <= ref1 ? j <= ref1 : j >= ref1; candidate = 1 <= ref1 ? ++j : --j) {
        value = Math.floor(Math.random() * remaining_negative_value);
        remaining_negative_value -= value;
        value = value / 100;
        all_attributes.push(value * -1);
      }
      all_attributes.push((remaining_negative_value / 100) * -1);
      this.current_attributes = this.shuffleArray(all_attributes);
      ref2 = this.current_attributes;
      results = [];
      for (k = 0, len = ref2.length; k < len; k++) {
        atr = ref2[k];
        results.push(console.log("Attrubute: " + atr));
      }
      return results;
    };

    root.shuffleArray = function(array) {
      var currentIndex, randomIndex, temporaryValue;
      currentIndex = array.length;
      while (0 !== currentIndex) {
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
      }
      return array;
    };

    return Logic;

  })();

}).call(this);
